---
- name: Check mandatory variables are defined
  assert:
    that: lookup('vars', item) or true
  with_items:
    - g_home
    - controller_tempdir
    - remote_tempdir

- name: download dotfiles
  delegate_to: localhost
  get_url:
    url: https://api.github.com/repos/rkm/dotfiles/tarball
    dest: "{{ controller_tempdir.path }}/dotfiles.tgz"
    timeout: 30
  changed_when: false # Will always be changed

- name: unarchive dotfiles
  delegate_to: localhost
  unarchive:
    src: "{{ controller_tempdir.path }}/dotfiles.tgz"
    dest: "{{ controller_tempdir.path }}"
    remote_src: true
    list_files: true
  changed_when: false # Will always be changed
  register: archive_contents

- name: register tmp dotfiles path
  set_fact:
    tmp_dotfiles_path: "{{ controller_tempdir.path }}/{{ archive_contents.files[0] }}"

- name: create combined .gitconfig
  delegate_to: localhost
  args:
    executable: /bin/bash
  shell: |
    set -euxo pipefail
    cat \
      "{{ tmp_dotfiles_path }}/common/gitconfig" \
      "{{ tmp_dotfiles_path }}/linux/config/git/config" \
    > "{{ controller_tempdir.path }}/gitconfig"
    mv \
      "{{ controller_tempdir.path }}/gitconfig" \
      "{{ tmp_dotfiles_path }}/linux/config/git/config"
  changed_when: false # will always be changed

- name: delete old dotfiles VERSION file
  file:
    dest: "{{ g_home }}/.config/VERSION"
    state: absent
  changed_when: false # will normally be changed

- name: deploy dotfiles - dry-run to check deleted
  synchronize:
    src: "{{ tmp_dotfiles_path }}/linux/config/"
    dest: "{{ g_home }}/.config"
    archive: false
    checksum: true
    times: false
    delete: true
    recursive: true
    rsync_opts: [--dry-run, --exclude=ansible_backup]
  register: sync_dry_run_result

- name: ensure backup dir exists
  file:
    path: "{{ g_home }}/.config/ansible_backup"
    state: directory
    mode: u=rwx,g=rwx,o=

- name: move any files marked for deletion
  shell: |
    set -euxo pipefail
    mkdir -p "{{ g_home }}/.config/ansible_backup/$(dirname {{ item }})"
    mv "{{ g_home }}/.config/{{ item }}" "{{ g_home }}/.config/ansible_backup/{{ item }}"
  with_items: >-
    {{
    sync_dry_run_result.stdout_lines
    | reject('search', '\/$')
    | map("regex_findall", '^\*deleting\s+(.*)$')
    | reject('equalto', [])
    | map("first")
    | list
    }}
  when: '"deleting" in sync_dry_run_result.msg'

- name: delete empty directories
  command: |
    find {{ g_home }}/.config \
    -not \( -path {{ g_home }}/.config/ansible_backup -prune \) \
    -empty -type d -print
  register: find_delete_result
  changed_when: find_delete_result.stdout | length > 0

- name: deploy dotfiles
  synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    archive: false
    checksum: true
    times: false
    delete: true
    recursive: true
    rsync_opts: [--exclude=ansible_backup]
  with_items:
    - src: "{{ tmp_dotfiles_path }}/linux/config/"
      dest: "{{ g_home }}/.config"
    - src: "{{ tmp_dotfiles_path }}/linux/profile"
      dest: "{{ g_home }}/.profile"
  register: sync_result

- name: delete unused bash files
  file:
    dest: "{{ g_home }}/{{ item }}"
    state: absent
  with_items:
    - .bash_profile
    - .bash_login
    - .bash_logout
    - .bashrc

- name: debug changed files
  debug:
    msg: "{{ sync_result.results | map(attribute='msg') | list }}"
  when: sync_result.changed
  changed_when: true # should always be changed if run

- name: write dotfiles version
  copy:
    content: "{{ (tmp_dotfiles_path | realpath | basename).split('-')[2] }}\n"
    dest: "{{ g_home }}/.config/VERSION"
    mode: u=r,g=r,o=
  changed_when: false # will always be changed

- name: ensure ~/bin exists
  file:
    path: "{{ g_home }}/bin"
    state: directory
    mode: u=rwx,g=,o=
