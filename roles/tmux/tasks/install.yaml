---
- name: Check mandatory variables are defined
  assert:
    that: lookup('vars', item) or true
  with_items:
    - g_home
    - tmux_version

- name: ensure package manager tmux not installed
  become: true
  package:
    name: tmux
    state: absent
    autoremove: true

- name: install rhel dependencies
  become: true
  package:
    name: "{{ tmux_deps_rhel }}"
    state: present
  when: ansible_os_family == "RedHat"

- name: install ubuntu dependencies
  become: true
  package:
    name: "{{ tmux_deps_ubuntu }}"
    state: present
  when: ansible_distribution == "Ubuntu"

- name: download tmux source
  get_url:
    url: "https://github.com/tmux/tmux/releases/download/{{ tmux_version }}/tmux-{{ tmux_version }}.tar.gz"
    dest: "{{ remote_tempdir.path }}"

- name: unpack tmux source
  unarchive:
    src: "{{ remote_tempdir.path }}/tmux-{{ tmux_version }}.tar.gz"
    dest: "{{ remote_tempdir.path }}"
    remote_src: true
  register: archive_contents

- name: set tmux build dir
  set_fact:
    tmux_build_dir: "{{ remote_tempdir.path }}/tmux-{{ tmux_version }}"

- name: configure tmux
  command: ./configure --program-suffix=-{{ tmux_version }} --prefix={{ g_home }} --quiet
  args:
    chdir: "{{ tmux_build_dir }}"
  changed_when: false # will always be changed

- name: make tmux
  command: make -j --quiet
  args:
    chdir: "{{ tmux_build_dir }}"
  changed_when: false # will always be changed

- name: register existing tmux files
  find:
    paths: "{{ g_home }}/bin"
    patterns: tmux*
  register: tmux_files

- name: delete existing tmux files
  file:
    path: "{{ item.path }}"
    state: absent
    autoremove: true
  with_items: "{{ tmux_files.files }}"

- name: install tmux
  command: make install
  args:
    chdir: "{{ tmux_build_dir }}"
  changed_when: false # will always be changed

- name: Symlink tmux
  file:
    src: "{{ g_home }}/bin/tmux-{{ tmux_version }}"
    dest: "{{ g_home }}/bin/tmux"
    state: link
